cmake_minimum_required(VERSION 3.10)

# Set the C++ standard
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# If using MSVC compiler
if(MSVC)
  # Set the policy for MSVC runtime library selection to NEW behavior.
  # This tells CMake to automatically use /MDd for Debug, /MD for Release etc.
  # based on CMAKE_MSVC_RUNTIME_LIBRARY (which defaults appropriately).
  cmake_policy(SET CMP0091 NEW)

  # Optional but recommended: Explicitly set the desired runtime library type.
  # This ensures CMake targets the DLL runtimes.
  # It uses generator expressions to select Debug/Release automatically.
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL"
      CACHE STRING "MSVC Runtime Library selection")
endif()

project( DisplayImage LANGUAGES CXX CUDA)

find_package( OpenCV REQUIRED )
if(NOT OpenCV_FOUND)
    message(FATAL_ERROR "OpenCV not found!")
endif()

# Find Protobuf
# vcpkg installs CMake config files for Protobuf.
find_package(Protobuf REQUIRED)
if(NOT Protobuf_FOUND)
    message(FATAL_ERROR "Protobuf not found!")
endif()

# Find ONNX Runtime
# vcpkg also installs CMake config files for ONNX Runtime.
find_package(onnxruntime REQUIRED)
if(NOT onnxruntime_FOUND)
    message(FATAL_ERROR "ONNX Runtime not found!")
endif()


add_executable( DisplayImage src/main.cpp src/cuda/myKernel.cu)

target_link_libraries( DisplayImage PRIVATE
    ${OpenCV_LIBS}   
    # Protobuf target
    protobuf::libprotobuf
    # ONNX Runtime target
    onnxruntime::onnxruntime 
)